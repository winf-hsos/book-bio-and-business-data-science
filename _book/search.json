[
  {
    "objectID": "read-rest-apis.html",
    "href": "read-rest-apis.html",
    "title": "\n4  Daten aus REST APIs\n",
    "section": "",
    "text": "Warning: Paket 'tidyverse' wurde unter R Version 4.1.3 erstellt\n\n\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n\n\nv ggplot2 3.3.6          v purrr   0.3.4     \nv tibble  3.1.7          v dplyr   1.0.9     \nv tidyr   1.2.0          v stringr 1.4.0.9000\nv readr   2.1.2          v forcats 0.5.1     \n\n\nWarning: Paket 'ggplot2' wurde unter R Version 4.1.3 erstellt\n\n\nWarning: Paket 'tibble' wurde unter R Version 4.1.3 erstellt\n\n\nWarning: Paket 'tidyr' wurde unter R Version 4.1.3 erstellt\n\n\nWarning: Paket 'readr' wurde unter R Version 4.1.3 erstellt\n\n\nWarning: Paket 'dplyr' wurde unter R Version 4.1.3 erstellt\n\n\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\nNeben Dateien, wie CSV oder Excel-Formate, bieten gerade Softwareanwendungen in der Cloud häufig Webschnittstellen für den Zugriff auf ihre Daten an. Auch Shopify erlaubt den Zugriff auf sämtliche Daten mittels einer REST API. Der Begriff API steht für Application Programming Interface und bedeutet übersetzt Programmierschnittstelle. Was aber ist eine REST API?"
  },
  {
    "objectID": "read-rest-apis.html#was-ist-rest",
    "href": "read-rest-apis.html#was-ist-rest",
    "title": "\n4  Daten aus REST APIs\n",
    "section": "\n4.1 Was ist REST?",
    "text": "4.1 Was ist REST?\nREST steht für Representational State Transfer und ist ein häufig verwendetes Protokoll für Programmierschnittstellen, die über Webprotokolle kommunizieren. Wir sprechen dann auch von Webschnittstellen oder Webservices."
  },
  {
    "objectID": "read-rest-apis.html#rest-aufrufe-mit-r",
    "href": "read-rest-apis.html#rest-aufrufe-mit-r",
    "title": "\n4  Daten aus REST APIs\n",
    "section": "\n4.2 REST-Aufrufe mit R",
    "text": "4.2 REST-Aufrufe mit R\nEinen HTTP-Request erstellen\nREST-Schnittstellen verwenden das HTTP-Protokoll für die Kommunikation zwischen Client und Server. Um HTTP-Aufrufe mit R zu erstellen und auszuführen, installieren wir das Paket httr2:\n\ninstall.packages(\"httr2\")\ninstall.packages(\"jsonlite\")\n\nAnschließend können wir die Funktion request verwenden, um einen HTTP-Aufruf mit einer URL auszuführen. Im Standard verwendet die Funktion die Operation GET:\n\nlibrary(httr2)\n\nurl <- \"https://hs-osnabrueck.de\"\nreq <- request(url)\nreq\n\n# <httr2_request>\n# GET https://hs-osnabrueck.de\n# Body: empty\n\n\n\n\n\n\n\nMehr über HTTP-Requests\n\n\n\nNeben GET kennt das HTTP-Protokoll auch andere Operationen. Einen Überblick findet ihr auf den Webseiten des Mozilla Developer Networks.\n\n\nEinen HTTP-Request ausführen\n\nresp <- req_perform(req)\nresp\n\n# GET https://www.hs-osnabrueck.de/\n# Status: 200 OK\n# Content-Type: text/html\n# Body: In memory (72768 bytes)\n\nDer Status-Code 200 zeigt an, dass der Request erfolgreich war. Zusätzlich wird der Antworttyp im Feld Content-Type ausgegeben, der hier text/html ist. Für den Content Type gibt es eine standardisierte Liste von Werten, die auch MIME-Types genannt werden. Die Größe der Antwort, die wir vom Webserver erhalten haben, beträgt 72768 Bytes oder ca. 73 Kilobytes. Das ist somit die Größe des HTML-Dokuments für die Startseite der Hochschule Osnabrück.\nWir könnten jetzt den Body der Antwort auslesen und das HTML-Dokument mit R weiter verarbeiten. Wenngleich das Analysieren von Webinhalten spannend sein kann, ist es nicht Thema dieses Kapitels."
  },
  {
    "objectID": "read-rest-apis.html#die-shopify-api",
    "href": "read-rest-apis.html#die-shopify-api",
    "title": "\n4  Daten aus REST APIs\n",
    "section": "\n4.3 Die Shopify API",
    "text": "4.3 Die Shopify API\nZum Start lohnt es sich, in die Dokumentation der Shopify API zu schauen. Shopify bietet mehrere Programmierschnittstellen für unterschiedliche Zwecke. Darunter ist etwa die Storefront-API, um eigene Oberflächen für einen Webshop zu erstellen. Die für uns relevante API ist die Admin-API. Sie bietet vollen Zugriff auf die Daten eines Shops. Voraussetzung dafür ist, dass der Shop-Inhaber eine App angelegt und die Berechtigungen für den Zugriff auf relevante Daten, wie die Bestellungen, erteilt hat. Mit dieser App generiert Shopify eine Kombination aus API-Schlüssel (API Key) und Passwort. Beide Informationen werden für den Zugriff auf die API benötigt.\nDie allgemeine URL für einen Aufruf der REST Admin API sieht wie folgt aus:\nhttps://{apikey}:{password}@{hostname}/admin/api/{version}/{resource}.json\nBeispielaufruf\nZuerst definieren wir die URL für den Aufruf:\n\n\n[1] \"https://e1b14daf3821a15edac451f0c99c22dc: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@haster-bier.myshopify.com/admin/api/2022-04/locations.json\"\n\n\n\nurl <- \"https://**:**@haster-bier.myshopify.com/admin/api/2022-04/locations.json\"\n\nAnschließend verwenden wir die request Funktion, um einen GET-Request zu erzeugen und danach mit req_perform auszuführen:\n\nreq <- request(url)\nresp <- req_perform(req)\nresp\n\n# <httr2_response>\n# GET\n# https://**:**@haster-bier.myshopify.com/admin/api/2022-04/locations.json\n# Status: 200 OK\n# Content-Type: application/json\n# Body: In memory (3016 bytes)"
  },
  {
    "objectID": "read-rest-apis.html#der-body-einer-rest-response",
    "href": "read-rest-apis.html#der-body-einer-rest-response",
    "title": "\n4  Daten aus REST APIs\n",
    "section": "\n4.4 Der Body einer REST-Response",
    "text": "4.4 Der Body einer REST-Response\nDer interessante Teil der Antwort steckt im sogenannten Body, dessen Inhalt wir je nach MIME-Type mit definierten Funktionen resp_body_* auslesen können. Wir bedienen uns hier der einfachsten und agnostischen Variante und lesen den Body als Zeichenkette (String) aus:\n\nlocations <- resp %>%\n  resp_body_string()\n\nlocations %>%\n  glimpse()\n\n# chr \"{\\\"locations\\\":[{\\\"id\\\":66635038954,\\\"name\\\":\\\"Abholaktion 17.12.2021 # (Haste)\\\",\\\"address1\\\":\\\"Oldenburger Land\"| __truncated__\n\nWie schon durch den Content-Type angekündigt, handelt es sich bei der Antwort um einen JSON-formatierten Text."
  },
  {
    "objectID": "read-rest-apis.html#json-verarbeiten-mit-jsonlite",
    "href": "read-rest-apis.html#json-verarbeiten-mit-jsonlite",
    "title": "\n4  Daten aus REST APIs\n",
    "section": "\n4.5 JSON verarbeiten mit jsonlite\n",
    "text": "4.5 JSON verarbeiten mit jsonlite\n\nUm JSON-formatierte Texte in eine nutzbare Datenstruktur umzuwandeln, verwenden wir das Paket jsonlite. Es bietet zahlreiche Funktionen für die Arbeit mit dem JSON-Format, darunter die Funktion fromJSON, die uns einen String im JSON-Format in eine Liste von Dataframes umwandelt. Anschließend können wir mit der tibble Funktion daraus einen Tibble erstellen, den wir dann noch mit unnest auftrennen müssen:\n\nlibrary(tidyverse)\nlibrary(jsonlite)\n\nlocations_tbl <- fromJSON(locations) %>% \n  tibble() %>% \n  unnest(cols = c(.))\n\n# Alle Spaltennamen ausgeben lassen\nlocations_tbl %>% \n  colnames()\n\n [1] \"id\"                      \"name\"                   \n [3] \"address1\"                \"address2\"               \n [5] \"city\"                    \"zip\"                    \n [7] \"province\"                \"country\"                \n [9] \"phone\"                   \"created_at\"             \n[11] \"updated_at\"              \"country_code\"           \n[13] \"country_name\"            \"province_code\"          \n[15] \"legacy\"                  \"active\"                 \n[17] \"admin_graphql_api_id\"    \"localized_country_name\" \n[19] \"localized_province_name\"\n\n\n\nlocations_tbl %>% \n  select(name)\n\n\n\n  \n\n\n\n\nlocations_tbl"
  },
  {
    "objectID": "read-rest-apis.html#bestellungen-abfragen",
    "href": "read-rest-apis.html#bestellungen-abfragen",
    "title": "\n4  Daten aus REST APIs\n",
    "section": "\n4.6 Bestellungen abfragen",
    "text": "4.6 Bestellungen abfragen\nDa es in diesem Anwendungsfall um Verkaufsanalysen geht, interessieren uns speziell die Bestellungen, die Kunden in unserem Shop getätigt haben. Auch diese können wir über die Admin-API abrufen. Die URL von oben ändern wir gemäß der Dokumentation ab:\n\n\n\n\nurl <- \"https://**:**@haster-bier.myshopify.com/admin/api/2022-04/orders.json\"\n\n\n\n\nWenn wir nun den Request mit der neuen URL ausführen, erhalten wir als Ergebnis alle Bestellungen mit insgesamt 36 Zeilen und 85 Spalten:\n\nreq <- request(url)\nresp <- req_perform(req)\n\norders <- resp %>% \n  resp_body_string() %>% \n  fromJSON() %>% \n  tibble() %>% \n  unnest(cols = c(.)) %>% \n  dim()\n\norders\n\n[1] 36 85"
  },
  {
    "objectID": "case-covid.html",
    "href": "case-covid.html",
    "title": "Fall: Covid",
    "section": "",
    "text": "Wie verdeutlichen wir Trends und Entwicklungen über die Zeit?\nSind Daten vertrauenswürdig? Was sind Indizien für oder dagegen?"
  },
  {
    "objectID": "case-covid.html#datensatz",
    "href": "case-covid.html#datensatz",
    "title": "Fall: Covid",
    "section": "Datensatz",
    "text": "Datensatz"
  },
  {
    "objectID": "csv-format.html",
    "href": "csv-format.html",
    "title": "\n5  Das CSV-Format\n",
    "section": "",
    "text": "Im ersten Schritt jeder Datenanalyse müssen wir unserem Computer den Datensatz zur Verfügung stellen. Wir sprechen dabei auch vom Laden des Datesatzes. Dabei sagen wir dem Computer, wo die Daten zu finden sind und dass er sie für den schnelleren Zugriff in seinen Arbeitsspeicher holen soll.\nDaten liegen in den meisten Fällen in Form von Dateien vor. In manchen Fällen sind sie auch in einer Datenbank gespeichert. Im Fall einer Datei kann ein Datensatz in unterschiedlichen Formaten darin gespeichert werden. Ein gängiges Format ist das CSV-Format."
  },
  {
    "objectID": "csv-format.html#das-csv-format",
    "href": "csv-format.html#das-csv-format",
    "title": "\n5  Das CSV-Format\n",
    "section": "\n5.1 Das CSV-Format",
    "text": "5.1 Das CSV-Format\nStrukturierte Daten\nCSV steht für Comma Separated Values und beschreibt ein Format, um strukturierte Daten in einer Textdatei abzuspeichern. Ihr erkennt eine Textdatei im CSV-Format an der Endung .csv.\nDas CSV-Format ist das wohl verbreitetste Format für die Speicherung und den Austausch von strukturierten Daten. Fast jede Software, die Daten verwaltet oder analysiert, bietet Schnittstellen für CSV-Dateien an. Dafür gibt es gute Gründe:\n\nDie Verwendung von einfachen Textdateien erlaubt die Speicherung und Verarbeitung auf unterschiedlichen Umgebungen wie Windows, macOS oder Linux.\nDas Format ist einfach zu verstehen und auch für Menschen lesbar.\nCSV ist ein offenes Format, d. h. es gibt keine Organisation, die daran die Rechte besitzt und es kann daher von jeder Software verwendet werden. Es gab lange nicht einmal eine offizielle Spezifikation des Formats. Mittlerweile gibt es eine Spezifikation als offizieller MIME Type.\nKopfzeile und Trennzeichen\nDas CSV-Format speichert strukturierte Daten in einer tabellarischen Form, ähnlich wie in Spreadsheets. Jede Zeile stellt eine Beobachtung (Englisch: observation oder case) oder Datensatz (Englisch: record) dar, und jeder Datensatz hat verschiedene Attribute (oder Spalten), deren Werte durch ein Komma voneinander getrennt sind. Das Komma als Trennzeichen ist keineswegs verbindlich. Generell kann jedes Symbol verwendet werden. Häufige Alternativen sind das Semikolon, Leerzeichen oder ein Tabstop. Letzteres wird oft mit der eigenen Endung .tsv für Tab Separated Values gespeichert.\nUnten ihr einen Ausschnitt aus dem Covid19-Datensatz von Our World in Data, wie man ihn in einem einfachen Texteditor wie Notepad++ anzeigen lassen kann. Man erkennt schnell, dass sich die erste Zeile von den anderen unterscheidet: Sie beinhaltet die Spaltennamen, die hintereinander durch das Trennzeichen (hier: Komma) getrennt aufgelistet werden. Man nennt die erste Zeile auch Kopfzeile (Englisch: Header). Die Kopfzeile ist nicht verpflichtend. Es gibt auch CSV-Dateien ohne Kopfzeile. In diesem Fall muss die Benennung der Spalten später manuell erfolgen.\nNach der Kopfzeile stellt jede weitere Zeile die Spaltenwerte eines Datensatzes (oder Beobachtung) dar. Diese werden stets in der gleichen Reihenfolge wie in der Kopfzeile durch das Trennzeichen (hier: Komma) voneinander getrennt aufgelistet. Diese Regel ist wichtig, da sonst die Zuordnung von Werten zu Spaltennamen unmöglich wäre.\nEs muss nicht jeder Spaltenwert existieren. Sollte ein Wert für eine Beobachtung nicht vorhanden sein, so wird einfach nach dem Komma nichts eingetragen und es folgen zwei Kommata nacheinander.\niso_code,continent,location,date,total_cases,new_cases, ...\nDEU,Europe,Germany,2020-01-27,1.0,1.0, ...\nDEU,Europe,Germany,2020-01-28,4.0,3.0, ...\nDEU,Europe,Germany,2020-01-29,4.0,0.0, ...\nDEU,Europe,Germany,2020-01-30,4.0,0.0, ...\n..."
  },
  {
    "objectID": "csv-format.html#die-funktion-read_csv",
    "href": "csv-format.html#die-funktion-read_csv",
    "title": "\n5  Das CSV-Format\n",
    "section": "\n5.2 Die Funktion read_csv\n",
    "text": "5.2 Die Funktion read_csv\n\nDie Funktion read_csv aus dem readr Paket erlaubt und das effiziente Laden von Daten aus CSV-Dateien. Der Code unten lädt die tagesaktuelle Version des Covid-19 Datensatzes von Our World in Data:\n\ncovid <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\nRows: 194496 Columns: 67\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr   (4): iso_code, continent, location, tests_units\ndbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\ndate  (1): date\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "trends.html",
    "href": "trends.html",
    "title": "\n6  Trends\n",
    "section": "",
    "text": "Kennzahlen einer globalen Pandemie, wie die täglichen Neuinfektionen, eignen sich gut für die Einführung von Visualisierungsformen für Trends und Entwicklungen. Spätestens sein den Jahren der Pandemie, beginnend im Frühjahr 2020, kennt jeder entsprechende Diagramme aus den Nachrichten. In diesem Kapitel lernen wir, diese und andere Diagramme mit ggplot2 selbst zu erstellen."
  },
  {
    "objectID": "trends.html#liniendiagramme",
    "href": "trends.html#liniendiagramme",
    "title": "\n6  Trends\n",
    "section": "\n6.1 Liniendiagramme",
    "text": "6.1 Liniendiagramme\nEine Serie\nLiniendiagramme verwenden Verbindungen zwischen benachbarten Punkten, um über die Steigung der Linien Entwicklungen sichtbar werden zu lassen. Für die Umsetzung dieser Linien in ggplot2 verwenden wir die Funktion geom_line. Die Punkte selbst werden über die x- und y-Achsen bestimmt. Typischerweise tragen wir auf der x-Achse eine zeitliche Dimension ab, während wir die y-Achse für die betrachtete Größe verwenden.\nFür die folgenden Visualisierungen filtern wir die Daten auf Frankreich und den Januar 2022:\n\ncov_france <- \n  covid %>% \n  filter(location == \"France\", date >= \"2022-01-01\", date <= \"2022-01-31\") %>%\n  select(date, new_cases_smoothed_per_million)\n\nAuf der Grundlage erstellen wir ein Liniendiagramm:\n\ncov_france %>% \n  ggplot() +\n  aes(x = date, y = new_cases_smoothed_per_million) +\n  geom_line()\n\n\n\n\nLinien und Punkte zusammen\nUm die Verbindungen zwischen zwei Punkten deutlicher sichtbar werden zu lassen, können wir zusätzlich zu den Linien auch die Punkte in das Diagramm einzeichnen:\n\ncov_france %>% \n  ggplot() +\n  aes(x = date, y = new_cases_smoothed_per_million) +\n  geom_line() +\n  geom_point()\n\n\n\n\nMehrere Serien\n\ncovid %>% \n  filter(location %in% c(\"France\", \"Spain\"), date >= \"2022-01-01\") %>% \n  select(date, new_cases_smoothed_per_million, location) %>% \n  ggplot() +\n  aes(x = date, y = new_cases_smoothed_per_million, color = location) +\n  geom_line()"
  },
  {
    "objectID": "case-twitter-a.html",
    "href": "case-twitter-a.html",
    "title": "Fall: Tweets",
    "section": "",
    "text": "Was ist SQL und wofür können wir es verwenden?\nWie können wir mit SQL Daten abfragen?"
  },
  {
    "objectID": "case-twitter-a.html#datensatz",
    "href": "case-twitter-a.html#datensatz",
    "title": "Fall: Tweets",
    "section": "Datensatz",
    "text": "Datensatz"
  },
  {
    "objectID": "json-with-r.html#listen-oder-arrays",
    "href": "json-with-r.html#listen-oder-arrays",
    "title": "8  JSON",
    "section": "8.2 Listen oder Arrays",
    "text": "8.2 Listen oder Arrays"
  },
  {
    "objectID": "case-rewe.html",
    "href": "case-rewe.html",
    "title": "Fall: REWE",
    "section": "",
    "text": "Wie stellen wir Größenverhältnisse (Proportionen) effektiv dar?"
  },
  {
    "objectID": "case-rewe.html#daten",
    "href": "case-rewe.html#daten",
    "title": "Fall: REWE",
    "section": "Daten",
    "text": "Daten"
  },
  {
    "objectID": "case-rewe.html#datensatz",
    "href": "case-rewe.html#datensatz",
    "title": "Fall: REWE",
    "section": "Datensatz",
    "text": "Datensatz\nDer Datensatz besteht aus einem Snapshot aus dem März 2018 aller im REWE Online-Shop angebotenen Produkte.\n\n\n\n\n\n\nWas ist ein Snapshot?\n\n\n\nEin Snapshot ist der Stand eines Datensatzes zu einem bestimmten Zeitpunkt in der Vergangenheit. In diesem Fall wurden die Daten an einem besitmmten Tag aus dem REWE Online-Shop abgegriffen und gespeichert. Die Daten auf der Webseite können sich seitdem verändert haben. Der Datensatz reflektiert diese Änderungen nicht, er bleibt auf dem Stand der Erstellung."
  },
  {
    "objectID": "long-wide-data.html",
    "href": "long-wide-data.html",
    "title": "11  Lange und breite Daten",
    "section": "",
    "text": "Wie bereits in Abschnitt Fall 2: Covid gesehen, können Daten in unterschiedlicher Form vorliegen."
  }
]